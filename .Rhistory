install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
data(dataset1)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=f,lpv=lpv)
mn
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
ls()
ls("MetaNetR:ts")
ls("MetaNetR")
ls("package:MetaNetR")
clear.data(Mn)
clear.data(mn)
mn
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=f,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=f,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
mn
ls("package:MetaNetR")
network.count(mn)
start.vis(mn)
run.vis(mn)
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=f,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
mn
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=f,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
mn
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
mn
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
data.dir <- 'C:/Users/nick/Documents/MetNetR/MetNetR/data/'
f <- c("d1.txt","d2.txt","d3.txt")
files <- paste(data.dir,f,sep="")
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=files,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
data.dir <- 'C:/Users/nick/Documents/MetNetR/MetNetR/data/'
f <- c("d1.txt","d2.txt","d3.txt")
files <- paste(data.dir,f,sep="")
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=files,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
MN
mn
mn$combined.networks
net <- mn$combined.networks[[1]]
net
sink <- as.numeric(V(net)[V(net)$name=='SINK'])
sink
ecount(net)
paths <- get.all.shortest.paths(net,from=sink,weights=rep(1,ecount(net)))
paths
levels<-unlist(lapply(paths$res, length))
levels
e.list <- as.numeric(unlist(strsplit(paste(c(1),c(2,3,4))," ")))
ids <- get.edge.ids(net,e.list)
e.list
ids
color.mapper <- c('black','red','blue')
color.mapper[[1,2]]
color.mapper[levels]
source('C:/Users/nick/Desktop/MetaNetR/R/Class.R')
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
source('C:/Users/nick/Desktop/MetaNetR/R/GeneralOptions.R')
source('C:/Users/nick/Desktop/MetaNetR/R/IO.R')
source('C:/Users/nick/Desktop/MetaNetR/R/Methods.R')
source('C:/Users/nick/Desktop/MetaNetR/R/Utility.R')
source('C:/Users/nick/Desktop/MetaNetR/R/VertexOptions.R')
source('C:/Users/nick/Desktop/MetaNetR/R/Vis.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
1
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
net
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<- igraph::get.all.shortest.paths(net, from=sink,weights=rep(1,igraph::ecount(net)))
levels<-unlist(lapply(paths$res, length))
levels
color.mapper <- c('red','black','blue')
level.color <- color.mapper[levels]
level.color
plot(net,edge.color=level.color)
plot(net,edge.color=level.color,edge.width=4)
plot(net,edge.color=level.color,edge.width=2)
plot(net,edge.color=level.color,edge.width=1)
plot(net,edge.color=level.color,edge.width=1.5)
par(mfrow=c(1,1))
plot(net,edge.color=level.color,edge.width=1.5)
paths<- igraph::get.all.shortest.paths(net, from=sink,weights=rep(1,igraph::ecount(net)))
paths$res
vcount(net)
ecount(net)
E(net)[1]
E(net)[0]
E(net)[2]
E(net)[2][1]
E(net)[2][1]
E(net)[2]
c(E(net)[2])
strsplit(E(net)[2],'-')
strsplit(E(net)[2])
class(E(net)[2])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]levels<-unlist(lapply(paths$res, length))
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]levels<-unlist(lapply(paths$res, length))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]levels<-unlist(lapply(paths$res, length))
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
levels
length(levels)==vcount(net)
E(net)[from(levels)]
levels
get.edges(net)
get.edgelist(net)
E(net)
E(net)[1]
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
paths
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
levels[20:21]
levels[19:22]
max(levels)
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
}
}
}
level.list
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
level.list
3 % 2
3 mod 2
3 -2 > 1
color.map <- c('red','black','blue')
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in length(level.list)){
if v in level.list[[lvl]]{
E(net)[from(v)]$level.color <- color.map[lvl]
}
}
}
level.color <- E(net)$level.color
color.map <- c('red','black','blue')
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in length(level.list)){
if (v in level.list[[lvl]]){
E(net)[from(v)]$level.color <- color.map[lvl]
break
}
}
}
level.color <- E(net)$level.color
level.color
color.map <- c('red','black','blue')
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in 1:length(level.list)){
if (v in level.list[[lvl]]){
E(net)[from(v)]$level.color <- color.map[lvl]
break
}
}
}
color.map <- c('red','black','blue')
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in 1:length(level.list)){
if (v %in% level.list[[lvl]]){
E(net)[from(v)]$level.color <- color.map[lvl]
break
}
}
}
level.color <- E(net)$level.color
level.color
plot(net,edge.color=level.color)
#LEVEL COLOR
color.map <- c('black','blue','red','green','black')
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in 1:length(level.list)){
if (v %in% level.list[[lvl]]){
E(net)[from(v)]$level.color <- color.map[lvl-1]
break
}
}
}
level.color <- E(net)$level.color
#LEVEL COLOR
color.map <- c('black','blue','red','green','black')
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in 1:length(level.list)){
if (v %in% level.list[[lvl]]){
E(net)[from(v)]$level.color <- color.map[lvl]
break
}
}
}
level.color <- E(net)$level.color
level.color
width.map <- c(1,1,2,3,4,5)
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in 1:length(level.list)){
if (v %in% level.list[[lvl]]){
E(net)[from(v)]$level.width <- width.map[lvl]
break
}
}
}
level.width <- E(net)$level.width
plot(net,edge.width=level.width,edge.color=level.color)
to.return <- vector("list",2)
## Hierarchy level
width.map <- c(1,3,2,1,1,1)
sink <- as.numeric(V(net)[V(net)$name=="SINK"])
paths<-get.all.shortest.paths(net, from=sink,weights=rep(1,ecount(net)))
levels<-unlist(lapply(paths$res, length))[1:vcount(net)]
level.list <- list(c(),c(),c())
for (i in 1:length(levels)){
for (idx in 1:max(levels)){
if (levels[i]==idx){
level.list[[idx]] <- c(level.list[[idx]],i)
break
}
}
}
v.idx <- 1:vcount(net)
for (v in v.idx){
for (lvl in 1:length(level.list)){
if (v %in% level.list[[lvl]]){
E(net)[from(v)]$level.width <- width.map[lvl]
break
}
}
}
level.width <- E(net)$level.width
plot(net,edge.width=level.width,edge.color=level.color)
d <- igraph::edge.betweenness(net,weights=rep(1,igraph::ecount(net)))
d
ds <- as.numeric(scale(d))
ds
help(scale)
d <- igraph::edge.betweenness(net,weights=rep(1,igraph::ecount(net)))
d <- (d - min(d)) / (max(d) - min(d))
d
d <- as.numeric(factor(d))
d <- ifelse(d >= 11,11,d)
d
mean(d)
help(edge.lty)
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/VertexOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/VertexOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/EdgeOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
3
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/GeneralOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/GeneralOptions.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
source('C:/Users/nick/Desktop/MetaNetR/R/Methods.R')
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
library(igraph)
help(get.all.shortest.paths)
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
data.dir <- 'C:/Users/nick/Documents/MetNetR/MetNetR/data/'
f <- c("d1.txt","d2.txt","d3.txt")
files <- paste(data.dir,f,sep="")
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=files,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
mn
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
data.dir <- 'C:/Users/nick/Documents/MetNetR/MetNetR/data/'
f <- c("d1.txt","d2.txt","d3.txt")
files <- paste(data.dir,f,sep="")
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=files,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
help(from)
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
data.dir <- 'C:/Users/nick/Documents/MetNetR/MetNetR/data/'
f <- c("d1.txt","d2.txt","d3.txt")
files <- paste(data.dir,f,sep="")
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=files,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
f <- list(dataset1,dataset2,dataset3)
data.dir <- 'C:/Users/nick/Documents/MetNetR/MetNetR/data/'
f <- c("d1.txt","d2.txt","d3.txt")
files <- paste(data.dir,f,sep="")
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=files,lpv=lpv)
map.network(mn,datasets=c(1,2,3),lpv=list(list(1,1:2,1:2),list(1,1:2,1),list(1,1:2,2:3)))
run.vis(mn=mn,network.index=1,new.window=T,single.plot=F)
library(roxygen)
library(roxygen2)
roxygenise()
roxygenize()
roxygen2::roxygenise()
source('C:/Users/nick/Desktop/MetaNetR/R/IO.R')
source('C:/Users/nick/Desktop/MetaNetR/R/Methods.R')
source('C:/Users/nick/Desktop/MetaNetR/R/Utility.R')
roxygen2::roxygenise()
setwd('c:/users/nick/desktop/metanetr')
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(MetaNetR)
data(dataset1)
data(dataset2)
data(dataset3)
files <- list(dataset1,dataset2,dataset3)
lpv <- list(list(1,2:4,5:7),list(1,2:4,5:7),list(1,2:4,5:7))
mn <- load.data(f=files,lpv=lpv)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
help(load.data)
library(tools)
add_datalist("c:/users/nick/desktop/metanetr", force = FALSE)
add_datalist()
add_datalist("metanetr")
add_datalist("data")
