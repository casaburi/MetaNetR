orig.sum <- 1 - prob.values[m.idx]
for (i in 1:m.card){
if (i==m.idx){prob.values[i]<-cval}
else{
prob.values[i] <- (prob.values[i]/orig.sum)*(1-cval)
}
}
m.df[df.idx:(df.idx+m.card-1)] <- prob.values
df.idx <- df.idx + m.card
if (df.idx >= length(m.df)){break}
}
new.fit <- fit
new.fit[[manip.var]] <- m.df
posterior <- cpquery(new.fit,
event=eval(parse(cpqevent)),
evidence=TRUE)
posterior.of.interest[match(c(cval),c(0,0.5,1))] <- posterior
}
return(posterior.of.interest)
}
p<-get.sens(fit,event="(DEP_DELAY==1)",manip="(ORIG_REGION=='South')")
x <- "(DEP_DELAY==1)"
y<-cpquery(fit,event=eval(parse(x)),evidence=TRUE)
y<-cpquery(fit,event=eval(parse(text=x)),evidence=TRUE)
y
get.sens <- function(fit,
event,
manip,
evidence=TRUE)
{
#evidence should be of form: list(RV1=val, RV2=val, ...)
iv<-unlist(strsplit(event,"[==,()]"))
mv<-unlist(strsplit(manip,"[==,()]"))
interest.var<-iv[2]
interest.event<-unlist(strsplit(iv[4],"[']"))[2]
manip.var<-mv[2]
manip.event<-unlist(strsplit(mv[4],"[']"))[2]
##
m.df <- fit[[manip.var]][["prob"]]
m.card <- length(rownames(m.df))
m.idx <- match(c(manip.event),rownames(m.df))
posterior.of.interest <- c(NA,NA,NA)
for (cval in c(0,0.5,1)){
print(event)
cpqevent<-event
cpqevidence<-evidence
print(cpqevent)
while (TRUE){
df.idx <- 1
prob.values <- m.df[df.idx:(df.idx+m.card-1)]
orig.sum <- 1 - prob.values[m.idx]
for (i in 1:m.card){
if (i==m.idx){prob.values[i]<-cval}
else{
prob.values[i] <- (prob.values[i]/orig.sum)*(1-cval)
}
}
m.df[df.idx:(df.idx+m.card-1)] <- prob.values
df.idx <- df.idx + m.card
if (df.idx >= length(m.df)){break}
}
new.fit <- fit
new.fit[[manip.var]] <- m.df
posterior <- bnlearn::cpquery(new.fit,
event=eval(parse(text=cpqevent)),
evidence=TRUE)
posterior.of.interest[match(c(cval),c(0,0.5,1))] <- posterior
}
return(posterior.of.interest)
}
y
p<-get.sens(fit,event="(DEP_DELAY==1)",manip="(ORIG_REGION=='South')")
get.sens <- function(fit,
event,
manip,
evidence=TRUE)
{
#evidence should be of form: list(RV1=val, RV2=val, ...)
iv<-unlist(strsplit(event,"[==,()]"))
mv<-unlist(strsplit(manip,"[==,()]"))
interest.var<-iv[2]
interest.event<-unlist(strsplit(iv[4],"[']"))[2]
manip.var<-mv[2]
manip.event<-unlist(strsplit(mv[4],"[']"))[2]
##
m.df <- fit[[manip.var]][["prob"]]
m.card <- length(rownames(m.df))
m.idx <- match(c(manip.event),rownames(m.df))
posterior.of.interest <- c(NA,NA,NA)
for (cval in c(0,0.5,1)){
print(event)
cpqevent<<-event
cpqevidence<-evidence
print(cpqevent)
while (TRUE){
df.idx <- 1
prob.values <- m.df[df.idx:(df.idx+m.card-1)]
orig.sum <- 1 - prob.values[m.idx]
for (i in 1:m.card){
if (i==m.idx){prob.values[i]<-cval}
else{
prob.values[i] <- (prob.values[i]/orig.sum)*(1-cval)
}
}
m.df[df.idx:(df.idx+m.card-1)] <- prob.values
df.idx <- df.idx + m.card
if (df.idx >= length(m.df)){break}
}
new.fit <- fit
new.fit[[manip.var]] <- m.df
posterior <- bnlearn::cpquery(new.fit,
event=eval(parse(text=cpqevent)),
evidence=TRUE)
posterior.of.interest[match(c(cval),c(0,0.5,1))] <- posterior
}
return(posterior.of.interest)
}
p<-get.sens(fit,event="(DEP_DELAY==1)",manip="(ORIG_REGION=='South')")
p
get.sens <- function(fit,
event,
manip,
evidence=TRUE)
{
cpqevent<-event
cpqevidence<-evidence
#evidence should be of form: list(RV1=val, RV2=val, ...)
iv<-unlist(strsplit(event,"[==,()]"))
mv<-unlist(strsplit(manip,"[==,()]"))
interest.var<-iv[2]
interest.event<-unlist(strsplit(iv[4],"[']"))[2]
manip.var<-mv[2]
manip.event<-unlist(strsplit(mv[4],"[']"))[2]
##
m.df <- fit[[manip.var]][["prob"]]
m.card <- length(rownames(m.df))
m.idx <- match(c(manip.event),rownames(m.df))
posterior.of.interest <- c(NA,NA,NA)
for (cval in c(0,0.5,1)){
while (TRUE){
df.idx <- 1
prob.values <- m.df[df.idx:(df.idx+m.card-1)]
orig.sum <- 1 - prob.values[m.idx]
for (i in 1:m.card){
if (i==m.idx){prob.values[i]<-cval}
else{
prob.values[i] <- (prob.values[i]/orig.sum)*(1-cval)
}
}
m.df[df.idx:(df.idx+m.card-1)] <- prob.values
df.idx <- df.idx + m.card
if (df.idx >= length(m.df)){break}
}
new.fit <- fit
new.fit[[manip.var]] <- m.df
posterior <- do.call("cpquery",list(new.fit,
event=eval(parse(text=cpqevent)),
evidence=TRUE))
# posterior <- cpquery(new.fit,
#                     event=eval(parse(text=cpqevent)),
#                     evidence=TRUE)
posterior.of.interest[match(c(cval),c(0,0.5,1))] <- posterior
}
return(posterior.of.interest)
}
p<-get.sens(fit,event="(DEP_DELAY==1)",manip="(ORIG_REGION=='South')")
get.sens <- function(fit,
event,
manip,
evidence=TRUE)
{
cpqevent<-event
cpqevidence<-evidence
#evidence should be of form: list(RV1=val, RV2=val, ...)
iv<-unlist(strsplit(event,"[==,()]"))
mv<-unlist(strsplit(manip,"[==,()]"))
interest.var<-iv[2]
interest.event<-unlist(strsplit(iv[4],"[']"))[2]
manip.var<-mv[2]
manip.event<-unlist(strsplit(mv[4],"[']"))[2]
##
m.df <- fit[[manip.var]][["prob"]]
m.card <- length(rownames(m.df))
m.idx <- match(c(manip.event),rownames(m.df))
posterior.of.interest <- c(NA,NA,NA)
for (cval in c(0,0.5,1)){
while (TRUE){
df.idx <- 1
prob.values <- m.df[df.idx:(df.idx+m.card-1)]
orig.sum <- 1 - prob.values[m.idx]
for (i in 1:m.card){
if (i==m.idx){prob.values[i]<-cval}
else{
prob.values[i] <- (prob.values[i]/orig.sum)*(1-cval)
}
}
m.df[df.idx:(df.idx+m.card-1)] <- prob.values
df.idx <- df.idx + m.card
if (df.idx >= length(m.df)){break}
}
new.fit <- fit
new.fit[[manip.var]] <- m.df
posterior <- do.call("cpquery",list(new.fit,
event=as.symbol(cpqevent),
evidence=TRUE))
# posterior <- cpquery(new.fit,
#                     event=eval(parse(text=cpqevent)),
#                     evidence=TRUE)
posterior.of.interest[match(c(cval),c(0,0.5,1))] <- posterior
}
return(posterior.of.interest)
}
p<-get.sens(fit,event="(DEP_DELAY==1)",manip="(ORIG_REGION=='South')")
x
as.symbol(x)
call(as.symbol(x))
get.sens <- function(fit,
event,
manip,
evidence=TRUE)
{
cpqevent<-event
cpqevidence<-evidence
#evidence should be of form: list(RV1=val, RV2=val, ...)
iv<-unlist(strsplit(event,"[==,()]"))
mv<-unlist(strsplit(manip,"[==,()]"))
interest.var<-iv[2]
interest.event<-unlist(strsplit(iv[4],"[']"))[2]
manip.var<-mv[2]
manip.event<-unlist(strsplit(mv[4],"[']"))[2]
##
m.df <- fit[[manip.var]][["prob"]]
m.card <- length(rownames(m.df))
m.idx <- match(c(manip.event),rownames(m.df))
posterior.of.interest <- c(NA,NA,NA)
for (cval in c(0,0.5,1)){
while (TRUE){
df.idx <- 1
prob.values <- m.df[df.idx:(df.idx+m.card-1)]
orig.sum <- 1 - prob.values[m.idx]
for (i in 1:m.card){
if (i==m.idx){prob.values[i]<-cval}
else{
prob.values[i] <- (prob.values[i]/orig.sum)*(1-cval)
}
}
m.df[df.idx:(df.idx+m.card-1)] <- prob.values
df.idx <- df.idx + m.card
if (df.idx >= length(m.df)){break}
}
new.fit <- fit
new.fit[[manip.var]] <- m.df
posterior <- do.call("cpquery",list(new.fit,
event=eval(parse(text=cpqevent)),
evidence=TRUE))
# posterior <- cpquery(new.fit,
#                     event=eval(parse(text=cpqevent)),
#                     evidence=TRUE)
posterior.of.interest[match(c(cval),c(0,0.5,1))] <- posterior
}
return(posterior.of.interest)
}
call(as.symbol(x))
p<-get.sens(fit,event="(DEP_DELAY==1)",manip="(ORIG_REGION=='South')")
get.sens <- function(fit,
event,
manip,
evidence=TRUE)
{
cpqevent<<-event
cpqevidence<-evidence
#evidence should be of form: list(RV1=val, RV2=val, ...)
iv<-unlist(strsplit(event,"[==,()]"))
mv<-unlist(strsplit(manip,"[==,()]"))
interest.var<-iv[2]
interest.event<-unlist(strsplit(iv[4],"[']"))[2]
manip.var<-mv[2]
manip.event<-unlist(strsplit(mv[4],"[']"))[2]
##
m.df <- fit[[manip.var]][["prob"]]
m.card <- length(rownames(m.df))
m.idx <- match(c(manip.event),rownames(m.df))
posterior.of.interest <- c(NA,NA,NA)
for (cval in c(0,0.5,1)){
while (TRUE){
df.idx <- 1
prob.values <- m.df[df.idx:(df.idx+m.card-1)]
orig.sum <- 1 - prob.values[m.idx]
for (i in 1:m.card){
if (i==m.idx){prob.values[i]<-cval}
else{
prob.values[i] <- (prob.values[i]/orig.sum)*(1-cval)
}
}
m.df[df.idx:(df.idx+m.card-1)] <- prob.values
df.idx <- df.idx + m.card
if (df.idx >= length(m.df)){break}
}
new.fit <- fit
new.fit[[manip.var]] <- m.df
posterior <- cpquery(new.fit,
event=eval(parse(text=cpqevent)),
evidence=TRUE)
posterior.of.interest[match(c(cval),c(0,0.5,1))] <- posterior
}
return(posterior.of.interest)
}
p<-get.sens(fit,event="(DEP_DELAY==1)",manip="(ORIG_REGION=='South')")
p
get.sfun(p,0.3)
fit$DEP_DELAY
get.sfun(p,0.92)
get.sfun(p,0.83)
y<-sapply(-5:5,function(x) (0.8608*x + 0.8555) / (0.8627*x + 1))
y
plot(-5:5,y)
y<-sapply(seq(0,1,by=0.05),function(x) (0.86*x + 0.86) / (0.86*x + 1))
plot(seq(0,1,by=0.05),y)
arc.df <- data.frame(from=c('MC',
'MC',
'ISC',
'B',
'B',
'B'),
to=c('B',
'ISC',
'C',
'C',
'CT',
'SH'))
mc.arcs <- data.frame(from=c('MC',
'MC',
'ISC',
'B',
'B',
'B'),
to=c('B',
'ISC',
'C',
'C',
'CT',
'SH'))
mc.bn <- empty.graph(c('MC','B','ISC','C','CT','SH'))
arcs(mc.bn) <- as.matrix(mc.arcs)
graphviz.plot(mc.bn)
tf<-c("TRUE","FALSE")
cptMC <- matrix(c(0.2,0.8),ncol=2,dimnames=list(NULL,tf))
cptB <- matrix(c(0.2,0.8,0.05,0.95),ncol=2,dimnames=list("B"=tf,"MC"=tf))
cptISC <- matrix(c(0.8,0.2,0.2,0.8),ncol=2,dimnames=list("ISC"=tf,"MC"=tf))
cptC <- c(0.8,0.2,0.8,0.2,0.8,0.2,0.05,0.95)
dim(cptC) <- c(2,2,2)
dimnames(cptC) <- list("C"=tf,"B"=tf,"ISC"=tf)
cptCT <- matrix(c(0.95,0.05,0.1,0.9),ncol=2,dimnames=list("CT"=tf,"B"=tf))
cptSH <- matrix(c(0.8,0.2,0.6,0.4),ncol=2,dimanames=list("SH"=tf,"B"=tf))
mc.fit <- custom.fit(mc.bn, dist=list(MC=cptMC,
B=cptB,
ISC=cptISC,
C=cptC,
CT=cptCT,
SH=cptSH))
tf<-c("TRUE","FALSE")
cptMC <- matrix(c(0.2,0.8),ncol=2,dimnames=list(NULL,tf))
cptB <- matrix(c(0.2,0.8,0.05,0.95),ncol=2,dimnames=list("B"=tf,"MC"=tf))
cptISC <- matrix(c(0.8,0.2,0.2,0.8),ncol=2,dimnames=list("ISC"=tf,"MC"=tf))
cptC <- c(0.8,0.2,0.8,0.2,0.8,0.2,0.05,0.95)
dim(cptC) <- c(2,2,2)
dimnames(cptC) <- list("C"=tf,"B"=tf,"ISC"=tf)
cptCT <- matrix(c(0.95,0.05,0.1,0.9),ncol=2,dimnames=list("CT"=tf,"B"=tf))
cptSH <- matrix(c(0.8,0.2,0.6,0.4),ncol=2,dimnames=list("SH"=tf,"B"=tf))
mc.fit <- custom.fit(mc.bn, dist=list(MC=cptMC,
B=cptB,
ISC=cptISC,
C=cptC,
CT=cptCT,
SH=cptSH))
mc.fit
p <- get.sens(mc.fit,)
mc.fit
mc.fit$SH
mc.fit$SH[1,2]
mc.fit[1,2]
mc.fit$SH[1,2]
mc.fit$SH[1]
mc.fit$SH$prob[1,2]
mc.fit$SH$prob[1,2] <- 0
mc.fit$SH$prob[2,2] <- 1
mc.fit$SH$prob
x <- mc.fit$SH$prob
x
x[,2] <- c(0,1)
x
mc.fit$SH <- x
mc.fit$SH$probv
mc.fit$SH$prob
x1 <- cpquery(mc.fit,event=(B=='TRUE'),evidence=TRUE)
X1
X
x1
x <- mc.fit$SH$prob
x
x[,2] <- c(0.5,0.5)
mc.fit$SH <- x
x2 <- cpquery(mc.fit,event=(B=='TRUE'),evidence=TRUE)
x2
x <- mc.fit$SH$prob
x[,2] <- c(1,0)
mc.fit$SH <- x
x3 <- cpquery(mc.fit,event=(B=='TRUE'),evidence=TRUE)
x3
d <- data.frame(x=c(0,0.5,1),y=c(0.07,0.07,0.07))
ggplot(data=d,aes(x=x,y=y))+geom_line()
ggplot(data=d,aes(x=x,y=y))+geom_line()+theme_bw()
x <- mc.fit$SH$prob
x
x[,2] <- c(0,1)
mc.fit$SH <- x
mc.fit$SH
x1 <- cpquery(mc.fit,event=(B=='TRUE'),evidence=(SH=='TRUE'))
x1
x <- mc.fit$SH$prob
x[,2] <- c(0.5,0.5)
mc.fit$SH$prob <- x
mc.fit$SH <- x
x2 <- cpquery(mc.fit,event=(B=='TRUE'),evidence=(SH=='TRUE'))
x2
x <- mc.fit$SH$prob
x[,2] <- c(1,0)
mc.fit$SH <- x
x3 <- cpquery(mc.fit,event=(B=='TRUE'),evidence=(SH=='TRUE'))
x3
d <- data.frame(x=c(0,0.5,1),y=c(x1,x2,x3))
ggplot(data=d,aes(x=x,y=y))+geom_line()+theme_bw()
ggplot(data=d,aes(x=x,y=y))+geom_fit()+theme_bw()
ggplot(data=d,aes(x=x,y=y))+geom_smooth()+theme_bw()
ggplot(data=d,aes(x=x,y=y))+geom_smooth(method="nl,")+theme_bw()
ggplot(data=d,aes(x=x,y=y))+geom_smooth(method="nlm")+theme_bw()
ggplot(data=d,aes(x=x,y=y))+stat_smooth()+theme_bw()
x1
x2
x3
p <- c(x1,x2,x3)
mc.fit$B$prob
get.sfun(p,0.3)
get.sfun(p,0.9)
get.sfun(p,0)
get.sfun(p,0.1)
library(metanetr)
library(MetaNetR)
help(set.metadata)
library(roxygen2)
devtools::document()
setwd("c:/users/nick/desktop/metanetr")
devtools::document()
library(metanetr)
library(MetaNetR)
data(dataset1)
load(dataset1)
load("data/dataset1.Rda")
devtools::use_data(dataset1,dataset1)
devtools::use_data(dataset1,dataset1,overwrite=TRUE)
load("data/dataset2.Rda")
load("data/dataset3.Rda")
load("data/dataset0.Rda")
devtools::use_data(dataset0,dataset0,overwrite=TRUE)
devtools::use_data(dataset2,dataset2,overwrite=TRUE)
devtools::use_data(dataset3,dataset3,overwrite=TRUE)
data(dataset1)
devtools::document()
devtools::document()
devtools::document()
warnings()
library(MetaNetR)
data(dataset1)
data
data()
library(MetaNetR)
data()
help(data)
data(package="MetaNetR")
getwd()
load("data/dataset1.Rda")
```{r}
names(dataset0)
names(dataset0) <- c("Label.1","Path.1","Path.2","Path.3","Value.1","Value.2","Value.3")
names(dataset1) <- c("Label.1","Path.1","Path.2","Path.3","Value.1","Value.2","Value.3")
names(dataset2) <- c("Label.1","Path.1","Path.2","Path.3","Value.1","Value.2","Value.3")
names(dataset3) <- c("Label.1","Path.1","Path.2","Path.3","Value.1","Value.2","Value.3")
names(dataset1)
getwd()
save(dataset0,file="data/dataset0.rda")
save(dataset1,file="data/dataset1.rda")
save(dataset2,file="data/dataset2.rda")
save(dataset3,file="data/dataset3.rda")
load("data.dataset0.rda")
load("data/dataset0.rda")
names(dataset0)
load("data/dataset1.rda")
load("data/dataset2.rda")
load("data/dataset3.rda")
names(dataset1)
names(dataset2)
names(dataset3)
install.packages("C:/Users/nick/Desktop/MetaNetR_0.99.0.tar.gz", repos = NULL, type = "source")
library(MetaNetR)
data(dataset1)
names(dataset1)
browseVignettes(package="MetaNetR")
browseVignettes("MetaNetR")
help(browseVignettes)
browseVignettes(package="MetaNetR")
browseVignettes(all=FALSE)
vignette("main-vignette","MetaNetR")
